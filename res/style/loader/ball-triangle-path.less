
//TODO not working
//https://github.com/ConnorAtherton/loaders.css/blob/master/src/animations/ball-triangle-trace.scss

@import "../mixins";
@import "global";

@amount: 20px;

@keyframes ball-triangle-path-1 {
    33% {
        transform: translate(@amount / 2, -@amount);
    }
    66% {
        transform: translate(@amount, 0px);
    }
    100% {
        transform: translate(0px, 0px);
    }
}

@keyframes ball-triangle-path-2 {
    33% {
        transform: translate(@amount / 2, @amount);
    }
    66% {
        transform: translate(- @amount / 2, @amount);
    }
    100% {
        transform: translate(0px, 0px);
    }
}

@keyframes ball-triangle-path-3 {
    33% {
        transform: translate(-@amount, 0px);
    }
    66% {
        transform: translate(- @amount / 2, -@amount);
    }
    100% {
        transform: translate(0px, 0px);
    }
}

/*
.ball-triangle-path-animations {
    @animations: ball-triangle-path-1 ball-triangle-path-2 ball-triangle-path-3;
    .loop(@i) when( @i > 0 ) {
        > div:nth-child($i) {
            //animation-name: nth( @animations, @i );
            animation-name: ball-triangle-path-1;
            animation-delay: 0;
            animation-duration: 2s;
            animation-timing-function: ease-in-out;
            animation-iteration-count: infinite;
        }
        .loop( (@i-1) );
    }
}
*/

@animations: ball-triangle-path-1 ball-triangle-path-2 ball-triangle-path-3;

/*
.loop( @n, @i:1 ) when( @i <= @n ) {
    > div:nth-child( @{i} ) {
        //animation-name: ball-triangle-path-1;
        animation-name: nth( @animations, (@i) );
        animation-delay: 0;
        animation-duration: 2s;
        animation-timing-function: ease-in-out;
        animation-iteration-count: infinite;
        .loop( @n, (@i+1) );
    }
}
*/
.loop {
    /*
    .-(@i: length(@animations)) when (@i > 0) {
        //@name: extract( @animations, @i );
        > div:nth-child( @i ) {
            //animation-name: ball-triangle-path-1;
            animation-name: extract( @animations, @i );
            animation-delay: 0;
            animation-duration: 2s;
            animation-timing-function: ease-in-out;
            animation-iteration-count: infinite;
            .loop( @n, (@i+1) );
        }
        .-((@i - 1));
    }
    */
    .for(@animations); .-each(@name) {
        > div:nth-child( @{i} ) {
            animation-name: extract( @animations, @i );
            animation-delay: 0;
            animation-duration: 2s;
            animation-timing-function: ease-in-out;
            animation-iteration-count: infinite;
        }
    }
}

.loader-ball-triangle-path ( @amount:50px, @n:3, @circle-size:10px ) {

    position: relative;
    //.ball-triangle-path-animations;
    //.loader-animation();
    .loop;
    transform: translate( -@amount / 1.667, -@amount / 1.333 );

    > div {

        .loader-animation();

        position: absolute;

        //.circle( 10px, #ff0000 );
        width: @circle-size;
        height: @circle-size;
        border-radius: 100%;
        background-color: #0000ff;
        //border: 1px solid #ff0000;

        //animation-delay: 0;
        //animation-duration: 2s;
        //animation-timing-function: ease-in-out;
        //animation-iteration-count: infinite;

        &:nth-of-type(1) {
            //animation-name: ball-triangle-path-1;
            top: @amount;
        }

        &:nth-of-type(2) {
            //animation-name: ball-triangle-path-2;
            left: @amount / 2;
        }

        &:nth-of-type(3) {
            //animation-name: ball-triangle-path-3;
            top: @amount;
            left: @amount;
        }
    }
}
